<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Bug Tracking System</title>
<style>
/* Styles for the Bug Tracking System */
body {
margin: 0;
padding: 0;
font-family: Arial, sans-serif;
background: url('https://cdn.pixabay.com/photo/2023/05/19/17/18/rose-beetle-8004990_1280.jpg') no-repeat center center;
height: 100vh;
display: flex;
justify-content: center;
align-items: center;
color: #ffffff;
background-size: cover;
}

.container {
background: rgba(255, 255, 255, 0.1);
padding: 30px;
border-radius: 8px;
text-align: center;
box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);
width: 300px;
display: flex;
flex-direction: column;
align-items: center;
}

h1 {
margin-bottom: 20px;
font-size: 24px;
color: #00bcd4;
}

form {
width: 100%;
}

input[type="text"],
input[type="email"],
input[type="password"],
select,
textarea {
width: 100%;
padding: 10px;
margin: 10px 0;
border: none;
border-radius: 5px;
box-sizing: border-box;
background: #ffffff;
}

textarea {
resize: vertical;
height: 100px;
}

.btn-register,
.btn-login,
.btn-submit {
background: #00bcd4;
color: #ffffff;
padding: 10px;
width: 100%;
border: none;
border-radius: 5px;
cursor: pointer;
margin-top: 10px;
}

.btn-register:hover,
.btn-login:hover,
.btn-submit:hover {
background: #0097a7;
}

.link {
color: #ffffff;
display: block;
margin-top: 10px;
text-decoration: none;
}

.link:hover {
text-decoration: underline;
}

.role-screen {
display: none;
background: rgba(255, 255, 255, 0.2);
padding: 30px;
border-radius: 8px;
text-align: center;
box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);
width: 80%;
max-width: 900px;
margin: auto;
}

.role-screen h2 {
margin-bottom: 20px;
font-size: 22px;
color: #00bcd4;
}

.dashboard {
display: flex;
justify-content: space-around;
flex-wrap: wrap;
}

.project-card {
background: rgba(255, 255, 255, 0.1);
padding: 15px;
margin: 10px;
border-radius: 5px;
box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
width: 250px;
}

.project-card h4 {
color: #00bcd4;
margin-bottom: 10px;
}

.project-card p {
font-size: 14px;
color: #ffffff;
}

.project-card .status {
font-size: 12px;
padding: 5px;
border-radius: 3px;
color: #ffffff;
background-color: #00bcd4;
display: inline-block;
margin-top: 10px;
}

.actions {
text-align: right;
}

.actions .btn {
margin-top: 10px;
padding: 5px;
font-size: 12px;
background-color: #00bcd4;
border: none;
border-radius: 5px;
color: white;
cursor: pointer;
}

.form-container {
display: none;
}

.form-container.active {
display: block;
}
</style>
</head>
<body>

<!-- Registration Page -->
<div id="register-container" class="form-container active">
<h1>Bug Tracking System - Register</h1>
<form id="registration-form">
<input type="text" id="name" placeholder="Enter Name" required>
<select id="designation" required>
<option value="" disabled selected>Select Designation</option>
<option value="user">User</option>
<option value="developer">Developer</option>
<option value="tester">Tester</option>
<option value="manager">Manager</option>
</select>
<input type="email" id="email" placeholder="Enter Email-Id" required>
<input type="text" id="employee-code" placeholder="Enter Employee Code" required>
<input type="password" id="password" placeholder="Enter Password" required>
<input type="password" id="confirm-password" placeholder="Re-Enter Password" required>
<button type="submit" class="btn-register">Register</button>
<a href="#" onclick="switchForm('login-container')">Have an Account? Go to Login</a>
</form>
</div>

<!-- Login Page -->
<div id="login-container" class="form-container">
<h1>Bug Tracking System - Login</h1>
<form id="login-form">
<input type="email" id="login-email" placeholder="Enter Email" required>
<input type="password" id="login-password" placeholder="Enter Password" required>
<button type="submit" class="btn-login">Login</button>
<a href="#" onclick="switchForm('register-container')">Not Have an Account? Go to Register</a>
</form>
</div>

<!-- User Screen (Bug Reporting) -->
<div class="role-screen" id="user-screen">
<h2>Report a Bug</h2>
<form id="bug-report-form">
<input type="text" id="bug-name" placeholder="Your Name" required>
<input type="email" id="bug-email" placeholder="Your Email" required>
<input type="date" id="bug-date" required>
<select id="bug-type" required>
<option value="" disabled selected>Select Bug Type</option>
<option value="ui">UI Issue</option>
<option value="functional">Functional Issue</option>
<option value="performance">Performance Issue</option>
</select>
<select id="bug-priority" required>
<option value="" disabled selected>Select Priority</option>
<option value="low">Low</option>
<option value="medium">Medium</option>
<option value="high">High</option>
</select>
<textarea id="bug-description" placeholder="Describe the issue" required></textarea>
<button type="submit" class="btn-submit">Submit Bug Report</button>
</form>
<button class="btn-back" onclick="logout()">Log Out</button>
</div>

<!-- Developer Screen -->
<div class="role-screen" id="developer-screen">
<h2>Assigned Bugs</h2>
<div class="dashboard" id="developer-dashboard">
<!-- Bug cards will be dynamically generated here -->
</div>
<button class="btn-back" onclick="logout()">Log Out</button>
</div>

<!-- Tester Screen -->
<div class="role-screen" id="tester-screen">
<h2>Bugs to Test</h2>
<div class="dashboard" id="tester-dashboard">
<!-- Bug cards will be dynamically generated here -->
</div>
<button class="btn-back" onclick="logout()">Log Out</button>
</div>

<!-- Manager Screen -->
<div class="role-screen" id="manager-screen">
<h2>All Bugs</h2>
<div class="dashboard" id="manager-dashboard">
<!-- Bug cards will be dynamically generated here -->
</div>
<button class="btn-back" onclick="logout()">Log Out</button>
</div>

<script>
let users = [];
let bugs = [];
let loggedInUser = null;
let developers = [];
let testers = [];

function switchForm(formId) {
document.querySelectorAll('.form-container').forEach(form => {
form.classList.remove('active');
});
document.getElementById(formId).classList.add('active');
}

function logout() {
document.querySelectorAll('.role-screen').forEach(screen => {
screen.style.display = 'none';
});
switchForm('login-container');
}

document.getElementById('registration-form').addEventListener('submit', function(event) {
event.preventDefault();
const name = document.getElementById('name').value;
const email = document.getElementById('email').value;
const designation = document.getElementById('designation').value;
const employeeCode = document.getElementById('employee-code').value;
const password = document.getElementById('password').value;
const confirmPassword = document.getElementById('confirm-password').value;

if (password !== confirmPassword) {
alert('Passwords do not match.');
return;
}

const newUser = {
name,
email,
designation,
employeeCode,
password
};
users.push(newUser);

if (designation === 'developer') {
developers.push(newUser);
} else if (designation === 'tester') {
testers.push(newUser);
}

alert('Registration successful! You can now log in.');
switchForm('login-container');
});

document.getElementById('login-form').addEventListener('submit', function(event) {
event.preventDefault();
const email = document.getElementById('login-email').value;
const password = document.getElementById('login-password').value;

const user = users.find(u => u.email === email && u.password === password);
if (user) {
loggedInUser = user;
alert(`Welcome, ${user.name}!`);
loadUserDashboard(user.designation);
} else {
alert('Invalid email or password.');
}
});

function loadUserDashboard(role) {
document.querySelectorAll('.role-screen').forEach(screen => {
screen.style.display = 'none';
});

if (role === 'user') {
document.getElementById('user-screen').style.display = 'block';
} else if (role === 'developer') {
document.getElementById('developer-screen').style.display = 'block';
loadBugsForDeveloper();
} else if (role === 'tester') {
document.getElementById('tester-screen').style.display = 'block';
loadBugsForTester();
} else if (role === 'manager') {
document.getElementById('manager-screen').style.display = 'block';
loadBugsForManager();
}
}

document.getElementById('bug-report-form').addEventListener('submit', function(event) {
event.preventDefault();
const bugName = document.getElementById('bug-name').value;
const bugEmail = document.getElementById('bug-email').value;
const bugDate = document.getElementById('bug-date').value;
const bugType = document.getElementById('bug-type').value;
const bugPriority = document.getElementById('bug-priority').value;
const bugDescription = document.getElementById('bug-description').value;

const newBug = {
id: bugs.length + 1,
name: bugName,
email: bugEmail,
date: bugDate,
type: bugType,
priority: bugPriority,
description: bugDescription,
status: 'Pending',
assignedTo: null
};
bugs.push(newBug);
alert('Bug report submitted successfully!');
});

function loadBugsForDeveloper() {
const dashboard = document.getElementById('developer-dashboard');
dashboard.innerHTML = '';
const assignedBugs = bugs.filter(b => b.assignedTo === loggedInUser.name);
assignedBugs.forEach(bug => {
const bugCard = document.createElement('div');
bugCard.className = 'bug-card';
bugCard.innerHTML = `
<h3>${bug.type} Bug</h3>
<p><strong>Name:</strong> ${bug.name}</p>
<p><strong>Description:</strong> ${bug.description}</p>
<p><strong>Priority:</strong> ${bug.priority}</p>
<button onclick="resolveBug(${bug.id})">Resolve</button>
`;
dashboard.appendChild(bugCard);
});
}

function loadBugsForTester() {
const dashboard = document.getElementById('tester-dashboard');
dashboard.innerHTML = '';
const bugsToTest = bugs.filter(b => b.status === 'Resolved' && b.assignedTo === null);
bugsToTest.forEach(bug => {
const bugCard = document.createElement('div');
bugCard.className = 'bug-card';
bugCard.innerHTML = `
<h3>${bug.type} Bug</h3>
<p><strong>Name:</strong> ${bug.name}</p>
<p><strong>Description:</strong> ${bug.description}</p>
<p><strong>Priority:</strong> ${bug.priority}</p>
<button onclick="validateBug(${bug.id})">Validate</button>
`;
dashboard.appendChild(bugCard);
});
}

function loadBugsForManager() {
const dashboard = document.getElementById('manager-dashboard');
dashboard.innerHTML = '';
bugs.forEach(bug => {
const bugCard = document.createElement('div');
bugCard.className = 'bug-card';
bugCard.innerHTML = `
<h3>${bug.type} Bug</h3>
<p><strong>Name:</strong> ${bug.name}</p>
<p><strong>Description:</strong> ${bug.description}</p>
<p><strong>Priority:</strong> ${bug.priority}</p>
<p><strong>Status:</strong> ${bug.status}</p>
<select id="developer-select-${bug.id}">
<option value="" disabled selected>Assign to Developer</option>
${developers.map(dev => `<option value="${dev.name}">${dev.name}</option>`).join('')}
</select>
<button onclick="assignBug(${bug.id})">Assign</button>
`;
dashboard.appendChild(bugCard);
});
}

function assignBug(bugId) {
const selectedDeveloper = document.getElementById(`developer-select-${bugId}`).value;
if (selectedDeveloper) {
const bug = bugs.find(b => b.id === bugId);
bug.assignedTo = selectedDeveloper;
bug.status = 'Assigned';
alert(`Bug assigned to ${selectedDeveloper}`);
loadBugsForManager();
} else {
alert('Please select a developer.');
}
}

function resolveBug(bugId) {
const bug = bugs.find(b => b.id === bugId);
bug.status = 'Resolved';
bug.assignedTo = null;
alert('Bug resolved! Waiting for validation.');
loadBugsForDeveloper();
}

function validateBug(bugId) {
const bug = bugs.find(b => b.id === bugId);
bug.status = 'Validated';
alert('Bug validated successfully!');
loadBugsForTester();
}

</script>
</body>
</html>